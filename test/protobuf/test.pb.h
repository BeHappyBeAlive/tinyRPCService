// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace zhurui {
class GetFriendListsRequest;
class GetFriendListsRequestDefaultTypeInternal;
extern GetFriendListsRequestDefaultTypeInternal _GetFriendListsRequest_default_instance_;
class GetFriendListsResponse;
class GetFriendListsResponseDefaultTypeInternal;
extern GetFriendListsResponseDefaultTypeInternal _GetFriendListsResponse_default_instance_;
class LoginReponse;
class LoginReponseDefaultTypeInternal;
extern LoginReponseDefaultTypeInternal _LoginReponse_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class ResponseCode;
class ResponseCodeDefaultTypeInternal;
extern ResponseCodeDefaultTypeInternal _ResponseCode_default_instance_;
class user;
class userDefaultTypeInternal;
extern userDefaultTypeInternal _user_default_instance_;
}  // namespace zhurui
PROTOBUF_NAMESPACE_OPEN
template<> ::zhurui::GetFriendListsRequest* Arena::CreateMaybeMessage<::zhurui::GetFriendListsRequest>(Arena*);
template<> ::zhurui::GetFriendListsResponse* Arena::CreateMaybeMessage<::zhurui::GetFriendListsResponse>(Arena*);
template<> ::zhurui::LoginReponse* Arena::CreateMaybeMessage<::zhurui::LoginReponse>(Arena*);
template<> ::zhurui::LoginRequest* Arena::CreateMaybeMessage<::zhurui::LoginRequest>(Arena*);
template<> ::zhurui::ResponseCode* Arena::CreateMaybeMessage<::zhurui::ResponseCode>(Arena*);
template<> ::zhurui::user* Arena::CreateMaybeMessage<::zhurui::user>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zhurui {

enum user_Sex : int {
  user_Sex_M = 0,
  user_Sex_W = 1,
  user_Sex_user_Sex_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  user_Sex_user_Sex_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool user_Sex_IsValid(int value);
constexpr user_Sex user_Sex_Sex_MIN = user_Sex_M;
constexpr user_Sex user_Sex_Sex_MAX = user_Sex_W;
constexpr int user_Sex_Sex_ARRAYSIZE = user_Sex_Sex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* user_Sex_descriptor();
template<typename T>
inline const std::string& user_Sex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, user_Sex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function user_Sex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    user_Sex_descriptor(), enum_t_value);
}
inline bool user_Sex_Parse(
    const std::string& name, user_Sex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<user_Sex>(
    user_Sex_descriptor(), name, value);
}
// ===================================================================

class LoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zhurui.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zhurui.LoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPwdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pwd = 2;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // @@protoc_insertion_point(class_scope:zhurui.LoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class LoginReponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zhurui.LoginReponse) */ {
 public:
  LoginReponse();
  virtual ~LoginReponse();

  LoginReponse(const LoginReponse& from);
  LoginReponse(LoginReponse&& from) noexcept
    : LoginReponse() {
    *this = ::std::move(from);
  }

  inline LoginReponse& operator=(const LoginReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReponse& operator=(LoginReponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReponse* internal_default_instance() {
    return reinterpret_cast<const LoginReponse*>(
               &_LoginReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginReponse& a, LoginReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReponse* New() const final {
    return CreateMaybeMessage<LoginReponse>(nullptr);
  }

  LoginReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReponse& from);
  void MergeFrom(const LoginReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zhurui.LoginReponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultCodeFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .zhurui.ResponseCode result_code = 1;
  bool has_result_code() const;
  private:
  bool _internal_has_result_code() const;
  public:
  void clear_result_code();
  const ::zhurui::ResponseCode& result_code() const;
  ::zhurui::ResponseCode* release_result_code();
  ::zhurui::ResponseCode* mutable_result_code();
  void set_allocated_result_code(::zhurui::ResponseCode* result_code);
  private:
  const ::zhurui::ResponseCode& _internal_result_code() const;
  ::zhurui::ResponseCode* _internal_mutable_result_code();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zhurui.LoginReponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::zhurui::ResponseCode* result_code_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class ResponseCode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zhurui.ResponseCode) */ {
 public:
  ResponseCode();
  virtual ~ResponseCode();

  ResponseCode(const ResponseCode& from);
  ResponseCode(ResponseCode&& from) noexcept
    : ResponseCode() {
    *this = ::std::move(from);
  }

  inline ResponseCode& operator=(const ResponseCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseCode& operator=(ResponseCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseCode* internal_default_instance() {
    return reinterpret_cast<const ResponseCode*>(
               &_ResponseCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResponseCode& a, ResponseCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseCode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseCode* New() const final {
    return CreateMaybeMessage<ResponseCode>(nullptr);
  }

  ResponseCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseCode& from);
  void MergeFrom(const ResponseCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zhurui.ResponseCode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errms = 2;
  void clear_errms();
  const std::string& errms() const;
  void set_errms(const std::string& value);
  void set_errms(std::string&& value);
  void set_errms(const char* value);
  void set_errms(const void* value, size_t size);
  std::string* mutable_errms();
  std::string* release_errms();
  void set_allocated_errms(std::string* errms);
  private:
  const std::string& _internal_errms() const;
  void _internal_set_errms(const std::string& value);
  std::string* _internal_mutable_errms();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zhurui.ResponseCode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errms_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zhurui.GetFriendListsRequest) */ {
 public:
  GetFriendListsRequest();
  virtual ~GetFriendListsRequest();

  GetFriendListsRequest(const GetFriendListsRequest& from);
  GetFriendListsRequest(GetFriendListsRequest&& from) noexcept
    : GetFriendListsRequest() {
    *this = ::std::move(from);
  }

  inline GetFriendListsRequest& operator=(const GetFriendListsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListsRequest& operator=(GetFriendListsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFriendListsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendListsRequest* internal_default_instance() {
    return reinterpret_cast<const GetFriendListsRequest*>(
               &_GetFriendListsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetFriendListsRequest& a, GetFriendListsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFriendListsRequest* New() const final {
    return CreateMaybeMessage<GetFriendListsRequest>(nullptr);
  }

  GetFriendListsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendListsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFriendListsRequest& from);
  void MergeFrom(const GetFriendListsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zhurui.GetFriendListsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // uint32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zhurui.GetFriendListsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class user :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zhurui.user) */ {
 public:
  user();
  virtual ~user();

  user(const user& from);
  user(user&& from) noexcept
    : user() {
    *this = ::std::move(from);
  }

  inline user& operator=(const user& from) {
    CopyFrom(from);
    return *this;
  }
  inline user& operator=(user&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user* internal_default_instance() {
    return reinterpret_cast<const user*>(
               &_user_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(user& a, user& b) {
    a.Swap(&b);
  }
  inline void Swap(user* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user* New() const final {
    return CreateMaybeMessage<user>(nullptr);
  }

  user* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user& from);
  void MergeFrom(const user& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zhurui.user";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef user_Sex Sex;
  static constexpr Sex M =
    user_Sex_M;
  static constexpr Sex W =
    user_Sex_W;
  static inline bool Sex_IsValid(int value) {
    return user_Sex_IsValid(value);
  }
  static constexpr Sex Sex_MIN =
    user_Sex_Sex_MIN;
  static constexpr Sex Sex_MAX =
    user_Sex_Sex_MAX;
  static constexpr int Sex_ARRAYSIZE =
    user_Sex_Sex_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Sex_descriptor() {
    return user_Sex_descriptor();
  }
  template<typename T>
  static inline const std::string& Sex_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Sex>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Sex_Name.");
    return user_Sex_Name(enum_t_value);
  }
  static inline bool Sex_Parse(const std::string& name,
      Sex* value) {
    return user_Sex_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
    kSexFieldNumber = 3,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 age = 2;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::uint32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .zhurui.user.Sex sex = 3;
  void clear_sex();
  ::zhurui::user_Sex sex() const;
  void set_sex(::zhurui::user_Sex value);
  private:
  ::zhurui::user_Sex _internal_sex() const;
  void _internal_set_sex(::zhurui::user_Sex value);
  public:

  // @@protoc_insertion_point(class_scope:zhurui.user)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 age_;
  int sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zhurui.GetFriendListsResponse) */ {
 public:
  GetFriendListsResponse();
  virtual ~GetFriendListsResponse();

  GetFriendListsResponse(const GetFriendListsResponse& from);
  GetFriendListsResponse(GetFriendListsResponse&& from) noexcept
    : GetFriendListsResponse() {
    *this = ::std::move(from);
  }

  inline GetFriendListsResponse& operator=(const GetFriendListsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListsResponse& operator=(GetFriendListsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFriendListsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendListsResponse* internal_default_instance() {
    return reinterpret_cast<const GetFriendListsResponse*>(
               &_GetFriendListsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetFriendListsResponse& a, GetFriendListsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFriendListsResponse* New() const final {
    return CreateMaybeMessage<GetFriendListsResponse>(nullptr);
  }

  GetFriendListsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendListsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFriendListsResponse& from);
  void MergeFrom(const GetFriendListsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zhurui.GetFriendListsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrinedListFieldNumber = 2,
    kResultCodeFieldNumber = 1,
  };
  // repeated .zhurui.user frinedList = 2;
  int frinedlist_size() const;
  private:
  int _internal_frinedlist_size() const;
  public:
  void clear_frinedlist();
  ::zhurui::user* mutable_frinedlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zhurui::user >*
      mutable_frinedlist();
  private:
  const ::zhurui::user& _internal_frinedlist(int index) const;
  ::zhurui::user* _internal_add_frinedlist();
  public:
  const ::zhurui::user& frinedlist(int index) const;
  ::zhurui::user* add_frinedlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zhurui::user >&
      frinedlist() const;

  // .zhurui.ResponseCode result_code = 1;
  bool has_result_code() const;
  private:
  bool _internal_has_result_code() const;
  public:
  void clear_result_code();
  const ::zhurui::ResponseCode& result_code() const;
  ::zhurui::ResponseCode* release_result_code();
  ::zhurui::ResponseCode* mutable_result_code();
  void set_allocated_result_code(::zhurui::ResponseCode* result_code);
  private:
  const ::zhurui::ResponseCode& _internal_result_code() const;
  ::zhurui::ResponseCode* _internal_mutable_result_code();
  public:

  // @@protoc_insertion_point(class_scope:zhurui.GetFriendListsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zhurui::user > frinedlist_;
  ::zhurui::ResponseCode* result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================

class UserServiceRpc_Stub;

class UserServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserServiceRpc() {};
 public:
  virtual ~UserServiceRpc();

  typedef UserServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::zhurui::LoginRequest* request,
                       ::zhurui::LoginReponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFrinedList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::zhurui::GetFriendListsRequest* request,
                       ::zhurui::GetFriendListsResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc);
};

class UserServiceRpc_Stub : public UserServiceRpc {
 public:
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UserServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UserServiceRpc ------------------------------------------

  void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::zhurui::LoginRequest* request,
                       ::zhurui::LoginReponse* response,
                       ::google::protobuf::Closure* done);
  void GetFrinedList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::zhurui::GetFriendListsRequest* request,
                       ::zhurui::GetFriendListsResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequest

// string name = 1;
inline void LoginRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::name() const {
  // @@protoc_insertion_point(field_get:zhurui.LoginRequest.name)
  return _internal_name();
}
inline void LoginRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:zhurui.LoginRequest.name)
}
inline std::string* LoginRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:zhurui.LoginRequest.name)
  return _internal_mutable_name();
}
inline const std::string& LoginRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void LoginRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhurui.LoginRequest.name)
}
inline void LoginRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhurui.LoginRequest.name)
}
inline void LoginRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhurui.LoginRequest.name)
}
inline std::string* LoginRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_name() {
  // @@protoc_insertion_point(field_release:zhurui.LoginRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zhurui.LoginRequest.name)
}

// string pwd = 2;
inline void LoginRequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::pwd() const {
  // @@protoc_insertion_point(field_get:zhurui.LoginRequest.pwd)
  return _internal_pwd();
}
inline void LoginRequest::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:zhurui.LoginRequest.pwd)
}
inline std::string* LoginRequest::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:zhurui.LoginRequest.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& LoginRequest::_internal_pwd() const {
  return pwd_.GetNoArena();
}
inline void LoginRequest::_internal_set_pwd(const std::string& value) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_pwd(std::string&& value) {
  
  pwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhurui.LoginRequest.pwd)
}
inline void LoginRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhurui.LoginRequest.pwd)
}
inline void LoginRequest::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhurui.LoginRequest.pwd)
}
inline std::string* LoginRequest::_internal_mutable_pwd() {
  
  return pwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:zhurui.LoginRequest.pwd)
  
  return pwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:zhurui.LoginRequest.pwd)
}

// -------------------------------------------------------------------

// LoginReponse

// .zhurui.ResponseCode result_code = 1;
inline bool LoginReponse::_internal_has_result_code() const {
  return this != internal_default_instance() && result_code_ != nullptr;
}
inline bool LoginReponse::has_result_code() const {
  return _internal_has_result_code();
}
inline void LoginReponse::clear_result_code() {
  if (GetArenaNoVirtual() == nullptr && result_code_ != nullptr) {
    delete result_code_;
  }
  result_code_ = nullptr;
}
inline const ::zhurui::ResponseCode& LoginReponse::_internal_result_code() const {
  const ::zhurui::ResponseCode* p = result_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zhurui::ResponseCode*>(
      &::zhurui::_ResponseCode_default_instance_);
}
inline const ::zhurui::ResponseCode& LoginReponse::result_code() const {
  // @@protoc_insertion_point(field_get:zhurui.LoginReponse.result_code)
  return _internal_result_code();
}
inline ::zhurui::ResponseCode* LoginReponse::release_result_code() {
  // @@protoc_insertion_point(field_release:zhurui.LoginReponse.result_code)
  
  ::zhurui::ResponseCode* temp = result_code_;
  result_code_ = nullptr;
  return temp;
}
inline ::zhurui::ResponseCode* LoginReponse::_internal_mutable_result_code() {
  
  if (result_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::zhurui::ResponseCode>(GetArenaNoVirtual());
    result_code_ = p;
  }
  return result_code_;
}
inline ::zhurui::ResponseCode* LoginReponse::mutable_result_code() {
  // @@protoc_insertion_point(field_mutable:zhurui.LoginReponse.result_code)
  return _internal_mutable_result_code();
}
inline void LoginReponse::set_allocated_result_code(::zhurui::ResponseCode* result_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_code_;
  }
  if (result_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_code, submessage_arena);
    }
    
  } else {
    
  }
  result_code_ = result_code;
  // @@protoc_insertion_point(field_set_allocated:zhurui.LoginReponse.result_code)
}

// bool success = 2;
inline void LoginReponse::clear_success() {
  success_ = false;
}
inline bool LoginReponse::_internal_success() const {
  return success_;
}
inline bool LoginReponse::success() const {
  // @@protoc_insertion_point(field_get:zhurui.LoginReponse.success)
  return _internal_success();
}
inline void LoginReponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void LoginReponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:zhurui.LoginReponse.success)
}

// -------------------------------------------------------------------

// ResponseCode

// int32 errcode = 1;
inline void ResponseCode::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseCode::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseCode::errcode() const {
  // @@protoc_insertion_point(field_get:zhurui.ResponseCode.errcode)
  return _internal_errcode();
}
inline void ResponseCode::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void ResponseCode::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:zhurui.ResponseCode.errcode)
}

// bytes errms = 2;
inline void ResponseCode::clear_errms() {
  errms_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResponseCode::errms() const {
  // @@protoc_insertion_point(field_get:zhurui.ResponseCode.errms)
  return _internal_errms();
}
inline void ResponseCode::set_errms(const std::string& value) {
  _internal_set_errms(value);
  // @@protoc_insertion_point(field_set:zhurui.ResponseCode.errms)
}
inline std::string* ResponseCode::mutable_errms() {
  // @@protoc_insertion_point(field_mutable:zhurui.ResponseCode.errms)
  return _internal_mutable_errms();
}
inline const std::string& ResponseCode::_internal_errms() const {
  return errms_.GetNoArena();
}
inline void ResponseCode::_internal_set_errms(const std::string& value) {
  
  errms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResponseCode::set_errms(std::string&& value) {
  
  errms_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhurui.ResponseCode.errms)
}
inline void ResponseCode::set_errms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhurui.ResponseCode.errms)
}
inline void ResponseCode::set_errms(const void* value, size_t size) {
  
  errms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhurui.ResponseCode.errms)
}
inline std::string* ResponseCode::_internal_mutable_errms() {
  
  return errms_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResponseCode::release_errms() {
  // @@protoc_insertion_point(field_release:zhurui.ResponseCode.errms)
  
  return errms_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseCode::set_allocated_errms(std::string* errms) {
  if (errms != nullptr) {
    
  } else {
    
  }
  errms_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errms);
  // @@protoc_insertion_point(field_set_allocated:zhurui.ResponseCode.errms)
}

// -------------------------------------------------------------------

// GetFriendListsRequest

// uint32 userid = 1;
inline void GetFriendListsRequest::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetFriendListsRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetFriendListsRequest::userid() const {
  // @@protoc_insertion_point(field_get:zhurui.GetFriendListsRequest.userid)
  return _internal_userid();
}
inline void GetFriendListsRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void GetFriendListsRequest::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:zhurui.GetFriendListsRequest.userid)
}

// -------------------------------------------------------------------

// user

// bytes name = 1;
inline void user::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& user::name() const {
  // @@protoc_insertion_point(field_get:zhurui.user.name)
  return _internal_name();
}
inline void user::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:zhurui.user.name)
}
inline std::string* user::mutable_name() {
  // @@protoc_insertion_point(field_mutable:zhurui.user.name)
  return _internal_mutable_name();
}
inline const std::string& user::_internal_name() const {
  return name_.GetNoArena();
}
inline void user::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void user::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhurui.user.name)
}
inline void user::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhurui.user.name)
}
inline void user::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhurui.user.name)
}
inline std::string* user::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* user::release_name() {
  // @@protoc_insertion_point(field_release:zhurui.user.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void user::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zhurui.user.name)
}

// uint32 age = 2;
inline void user::clear_age() {
  age_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 user::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 user::age() const {
  // @@protoc_insertion_point(field_get:zhurui.user.age)
  return _internal_age();
}
inline void user::_internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  age_ = value;
}
inline void user::set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:zhurui.user.age)
}

// .zhurui.user.Sex sex = 3;
inline void user::clear_sex() {
  sex_ = 0;
}
inline ::zhurui::user_Sex user::_internal_sex() const {
  return static_cast< ::zhurui::user_Sex >(sex_);
}
inline ::zhurui::user_Sex user::sex() const {
  // @@protoc_insertion_point(field_get:zhurui.user.sex)
  return _internal_sex();
}
inline void user::_internal_set_sex(::zhurui::user_Sex value) {
  
  sex_ = value;
}
inline void user::set_sex(::zhurui::user_Sex value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:zhurui.user.sex)
}

// -------------------------------------------------------------------

// GetFriendListsResponse

// .zhurui.ResponseCode result_code = 1;
inline bool GetFriendListsResponse::_internal_has_result_code() const {
  return this != internal_default_instance() && result_code_ != nullptr;
}
inline bool GetFriendListsResponse::has_result_code() const {
  return _internal_has_result_code();
}
inline void GetFriendListsResponse::clear_result_code() {
  if (GetArenaNoVirtual() == nullptr && result_code_ != nullptr) {
    delete result_code_;
  }
  result_code_ = nullptr;
}
inline const ::zhurui::ResponseCode& GetFriendListsResponse::_internal_result_code() const {
  const ::zhurui::ResponseCode* p = result_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zhurui::ResponseCode*>(
      &::zhurui::_ResponseCode_default_instance_);
}
inline const ::zhurui::ResponseCode& GetFriendListsResponse::result_code() const {
  // @@protoc_insertion_point(field_get:zhurui.GetFriendListsResponse.result_code)
  return _internal_result_code();
}
inline ::zhurui::ResponseCode* GetFriendListsResponse::release_result_code() {
  // @@protoc_insertion_point(field_release:zhurui.GetFriendListsResponse.result_code)
  
  ::zhurui::ResponseCode* temp = result_code_;
  result_code_ = nullptr;
  return temp;
}
inline ::zhurui::ResponseCode* GetFriendListsResponse::_internal_mutable_result_code() {
  
  if (result_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::zhurui::ResponseCode>(GetArenaNoVirtual());
    result_code_ = p;
  }
  return result_code_;
}
inline ::zhurui::ResponseCode* GetFriendListsResponse::mutable_result_code() {
  // @@protoc_insertion_point(field_mutable:zhurui.GetFriendListsResponse.result_code)
  return _internal_mutable_result_code();
}
inline void GetFriendListsResponse::set_allocated_result_code(::zhurui::ResponseCode* result_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_code_;
  }
  if (result_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_code, submessage_arena);
    }
    
  } else {
    
  }
  result_code_ = result_code;
  // @@protoc_insertion_point(field_set_allocated:zhurui.GetFriendListsResponse.result_code)
}

// repeated .zhurui.user frinedList = 2;
inline int GetFriendListsResponse::_internal_frinedlist_size() const {
  return frinedlist_.size();
}
inline int GetFriendListsResponse::frinedlist_size() const {
  return _internal_frinedlist_size();
}
inline void GetFriendListsResponse::clear_frinedlist() {
  frinedlist_.Clear();
}
inline ::zhurui::user* GetFriendListsResponse::mutable_frinedlist(int index) {
  // @@protoc_insertion_point(field_mutable:zhurui.GetFriendListsResponse.frinedList)
  return frinedlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zhurui::user >*
GetFriendListsResponse::mutable_frinedlist() {
  // @@protoc_insertion_point(field_mutable_list:zhurui.GetFriendListsResponse.frinedList)
  return &frinedlist_;
}
inline const ::zhurui::user& GetFriendListsResponse::_internal_frinedlist(int index) const {
  return frinedlist_.Get(index);
}
inline const ::zhurui::user& GetFriendListsResponse::frinedlist(int index) const {
  // @@protoc_insertion_point(field_get:zhurui.GetFriendListsResponse.frinedList)
  return _internal_frinedlist(index);
}
inline ::zhurui::user* GetFriendListsResponse::_internal_add_frinedlist() {
  return frinedlist_.Add();
}
inline ::zhurui::user* GetFriendListsResponse::add_frinedlist() {
  // @@protoc_insertion_point(field_add:zhurui.GetFriendListsResponse.frinedList)
  return _internal_add_frinedlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zhurui::user >&
GetFriendListsResponse::frinedlist() const {
  // @@protoc_insertion_point(field_list:zhurui.GetFriendListsResponse.frinedList)
  return frinedlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zhurui

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zhurui::user_Sex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zhurui::user_Sex>() {
  return ::zhurui::user_Sex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
